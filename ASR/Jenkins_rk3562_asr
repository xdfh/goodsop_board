pipeline {
    agent any

    parameters {
        string(name: 'MANUAL_VERSION', defaultValue: '', description: '（可选）手动指定一个版本号作为镜像标签，例如 v1.0.0')
    }

    environment {
        // --- 可配置变量 ---
        HARBOR_URL      = '192.168.1.161:80'
        HARBOR_PROJECT  = 'goodsop_board_asr'
        HARBOR_CREDENTIALS_ID = 'harbor-goodsop'
        IMAGE_NAME      = 'goodsop-asr-service'
        
        // --- 应用特定配置 ---
        APP_ENV_NAME    = 'ENV_FOR_DYNACONF' 
        APP_ENV_VALUE   = 'dev03'
    }

    stages {
        stage('Preparation') {
            steps {
                script {
                    // 1. 生成 YYYYMMDD_HHmmss 格式的时间戳标签
                    def timestamp = new Date().format('yyyyMMdd_HHmmss', TimeZone.getTimeZone('Asia/Shanghai'))
                    env.TIMESTAMP_TAG = timestamp
                    
                    // --- 定义所有需要生成的镜像名称 ---
                    // a) 基于时间戳的主镜像名称
                    env.MAIN_IMAGE_NAME = "${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${TIMESTAMP_TAG}"
                    // b) 'latest' 镜像名称
                    env.LATEST_IMAGE_NAME = "${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:latest"
                    
                    echo "----------------------------------------"
                    echo "项目名称: ${IMAGE_NAME}"
                    echo "主镜像 (时间戳): ${MAIN_IMAGE_NAME}"
                    echo "最新镜像 (latest): ${LATEST_IMAGE_NAME}"

                    // c) 如果用户手动输入了版本，则定义该镜像名称
                    if (params.MANUAL_VERSION && params.MANUAL_VERSION.trim()) {
                        env.MANUAL_VERSION_IMAGE_NAME = "${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${params.MANUAL_VERSION.trim()}"
                        echo "手动版本镜像: ${MANUAL_VERSION_IMAGE_NAME}"
                    }
                    
                    echo "部署环境: ${APP_ENV_VALUE}"
                    echo "----------------------------------------"
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "开始构建 Docker 镜像: ${MAIN_IMAGE_NAME}"
                    sh "docker build -f ASR/Dockerfile --build-arg ${APP_ENV_NAME}=${APP_ENV_VALUE} -t ${MAIN_IMAGE_NAME} ."
                    echo "Docker 镜像构建完成。"
                }
            }
        }
        
        stage('Login to Harbor') {
            steps {
                echo "登录到 Harbor: ${HARBOR_URL}"
                withCredentials([usernamePassword(credentialsId: HARBOR_CREDENTIALS_ID, passwordVariable: 'HARBOR_PASS', usernameVariable: 'HARBOR_USER')]) {
                    sh "docker login ${HARBOR_URL} -u ${HARBOR_USER} -p ${HARBOR_PASS}"
                }
                echo "Harbor 登录成功。"
            }
        }

        stage('Tag and Push Images') {
            steps {
                script {
                    // --- 标记并推送所有需要的镜像 ---
                    
                    // 1. 推送主镜像 (时间戳版本)
                    echo "开始推送主镜像: ${MAIN_IMAGE_NAME}"
                    sh "docker push ${MAIN_IMAGE_NAME}"
                    
                    // 2. 标记并推送 'latest' 镜像
                    echo "标记并推送 latest 镜像: ${LATEST_IMAGE_NAME}"
                    sh "docker tag ${MAIN_IMAGE_NAME} ${LATEST_IMAGE_NAME}"
                    sh "docker push ${LATEST_IMAGE_NAME}"

                    // 3. 如果有手动版本，则标记并推送
                    if (env.MANUAL_VERSION_IMAGE_NAME) {
                        echo "标记并推送手动版本镜像: ${MANUAL_VERSION_IMAGE_NAME}"
                        sh "docker tag ${MAIN_IMAGE_NAME} ${MANUAL_VERSION_IMAGE_NAME}"
                        sh "docker push ${MANUAL_VERSION_IMAGE_NAME}"
                    }
                    
                    echo "所有镜像推送完成。"
                }
            }
        }
    }
    
    post {
        always {
            // 清理本地镜像
            echo "开始清理本地镜像..."
            sh "docker rmi ${MAIN_IMAGE_NAME}"
            sh "docker rmi ${LATEST_IMAGE_NAME}"
            if (env.MANUAL_VERSION_IMAGE_NAME) {
                sh "docker rmi ${MANUAL_VERSION_IMAGE_NAME}"
            }
            
            // 登出 Harbor
            echo "从 Harbor 登出..."
            sh "docker logout ${HARBOR_URL}"
            echo "清理完成。"
        }
    }
}
